#!/usr/bin/env python

import io
import os
import sys
import codecs
import traceback
import subprocess
import xml.etree.ElementTree

def iter_actionscript_classes(source_path):
	for root, dirs, files in os.walk(source_path):
		root = os.path.relpath(root, source_path)
		for file in files:
			filename, extension = os.path.splitext(file)
			if extension == '.as':
				classname = os.path.join(root, filename).replace(os.sep, '.')
				yield unicode(classname, encoding=sys.getfilesystemencoding())
	return

class ConfigElement(xml.etree.ElementTree.Element):
	__slots__ = ()

	@classmethod
	def new(cls, tag, text=None, tail=None, parent=None, *args, **kwargs):
		element = cls(tag, *args, **kwargs)
		if text is not None:
			element.text = text
		if tail is not None:
			element.tail = tail
		if parent is not None:
			parent.append(element)
		return element

	def prettify(self, level=0):
		indent = u'\n' + level * u'\t'
		if len(self):
			if not self.text or not self.text.strip():
				self.text = indent + u'\t'
			if not self.tail or not self.tail.strip():
				self.tail = indent
			for element in self:
				element.prettify(level + 1)
			if not element.tail or not element.tail.strip():
				element.tail = indent
		elif not self.tail or not self.tail.strip():
			self.tail = indent
		return

class ConfigTree(xml.etree.ElementTree.ElementTree):
	__slots__ = ()

	def prettify(self):
		self.getroot().prettify()
		return

	def tostring(self):
		with io.BytesIO() as content_io:
			self.write(content_io, encoding='utf-8', xml_declaration=False)
			content = unicode(content_io.getvalue(), encoding='utf-8')
		return content

	@classmethod
	def generate(cls, classnames):
		config = ConfigElement.new('flex-config')
		includes = ConfigElement.new('includes', parent=config)
		includes.set('append', 'true')
		for classname in classnames:
			ConfigElement.new('symbol', parent=includes, text=classname)
		config.prettify()
		return cls(config)

	def savefile(self, filename):
		filename = os.path.normpath(filename).replace(os.sep, '/')
		dirname = os.path.dirname(filename) or '.'
		if not os.path.isdir(dirname):
			os.makedirs(dirname)
		with codecs.open(filename, 'w', 'utf-8') as xmlfile:
			xmlfile.write('<?xml version="1.0" encoding="utf-8"?>\n')
			xmlfile.write('<!-- This Adobe Flex compiler configuration file was generated by a tool. -->\n')
			xmlfile.write('<!-- Any modifications you make may be lost. -->\n')
			xmlfile.write(self.tostring())
		return

if __name__ == '__main__':
	try:
		# Retrieving ActionScript class names.
		classnames = iter_actionscript_classes('slb')
		# Generating additional flex configuration file.
		config_tree = ConfigTree.generate(classnames)
		config_tree.savefile('obj/XModLibExtConfig.xml')
		# Exiting with normal termination code.
		sys.exit(0)
	except StandardError:
		# Printing occurred error.
		traceback.print_exc()
		# Exiting with abnormal termination code.
		sys.exit(1)
